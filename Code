package mypack;
import java.awt.*;
import javax.swing.*;
import java.util.*;
import java.awt.event.*;

public class Tic_my extends JFrame {
	private JButton[][] buttons;
	private char current_player;
	private final char AI='X';
	private final char HUMAN='O';
	
	public Tic_my() {
		setTitle("AI vs HUMAN TIC-TAC-TOE");
		setSize(300,300);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new GridLayout(3,3));
		
		current_player=AI;
		buttons=new JButton[3][3];
		
		initializeButtons();
		
	}
	
	private void initializeButtons() {
		for(int i=0;i<3;i++) {
			for(int j=0;j<3;j++) {
				buttons[i][j]=new JButton("");
				buttons[i][j].setFont(new Font(Font.SANS_SERIF,Font.PLAIN,50));
				buttons[i][j].addActionListener(new ButtonClickListener(i,j));
				add(buttons[i][j]);
			}
		}
		
		makeAIMove();
	}
	
	private void switchPlayer() {
		current_player=(current_player==HUMAN)?AI:HUMAN;
		if(current_player==AI) {
			makeAIMove();
		}
	}
	
	private void makeAIMove() {
		int[] move=findBestMove();
		int row=move[0];
		int col=move[1];
		buttons[row][col].setText(String.valueOf(AI));
		
		if(checkWinner(AI)) {
			JOptionPane.showMessageDialog(null,"AI wins!!");
			resetBoard();
		}
		else if(isBoardFull()) {
			JOptionPane.showMessageDialog(null, "It's a draw!");
			resetBoard();
		}
		else {
			switchPlayer();
		}
	}
	
	private int[] findBestMove() {
		int bestScore=Integer.MIN_VALUE;
		int[] move= new int[]{-1,-1};
		
		for(int i=0;i<3;i++) {
			for(int j=0;j<3;j++) {
				if(buttons[i][j].getText().isEmpty()) {
					buttons[i][j].setText(String.valueOf(AI));
					int score=minimax(false);
					buttons[i][j].setText("");
					if(score>bestScore) {
						bestScore=score;
						move[0]=i;
						move[1]=j;
					}
				}
			}
		}
		return move;
	}
	
	private int minimax(boolean isMaximizing) {
		if(checkWinner(HUMAN)) {
			return -1;
		}
		if(checkWinner(AI)) {
			return 1;
		}
		if(isBoardFull()) {
			return 0;
		}
		
		if(isMaximizing) {
			int bestScore=Integer.MIN_VALUE;
			for(int i=0;i<3;i++) {
				for(int j=0;j<3;j++) {
					if(buttons[i][j].getText().isEmpty()) {
						buttons[i][j].setText(String.valueOf(AI));
						int score=minimax(false);
						buttons[i][j].setText("");
						bestScore=Math.max(score, bestScore);
					}
				}
			}
			return bestScore;
		}
		
		else {
			int bestScore=Integer.MAX_VALUE;
			for(int i=0;i<3;i++) {
				for(int j=0;j<3;j++) {
					if(buttons[i][j].getText().isEmpty()) {
						buttons[i][j].setText(String.valueOf(HUMAN));
						int score=minimax(true);
						buttons[i][j].setText("");
						bestScore=Math.min(score, bestScore);
					}
				}
			}
			return bestScore;
		}
	}
	
	private class ButtonClickListener implements ActionListener{
		
		private int row,col;
		
		public ButtonClickListener(int row, int col) {
			this.row=row;
			this.col=col;
		}
		
		public void actionPerformed(ActionEvent e) {
			if(buttons[row][col].getText().isEmpty()) {
				buttons[row][col].setText(String.valueOf(current_player));
			
				if(checkWinner(current_player)) {
					JOptionPane.showMessageDialog(null, current_player+"wins!!");
					resetBoard();
				}
				else if(isBoardFull()) {
					JOptionPane.showMessageDialog(null,"It's a draw!");
					resetBoard();
				}
				else {
					switchPlayer();
				}
			}
		}

	}
	
	private boolean checkWinner(char player) {
		for(int i=0;i<3;i++) {
			//row
			if(buttons[i][0].getText().equals(String.valueOf(player))&&
				buttons[i][1].getText().equals(String.valueOf(player))&&
				buttons[i][2].getText().equals(String.valueOf(player))) {
				return true;
			}
			//columns
			if(buttons[0][i].getText().equals(String.valueOf(player))&&
				buttons[1][i].getText().equals(String.valueOf(player))&&
				buttons[2][i].getText().equals(String.valueOf(player))) {
				return true;
			}	
		}
		if(buttons[0][0].getText().equals(String.valueOf(player))&&
			buttons[1][1].getText().equals(String.valueOf(player))&&
			buttons[2][2].getText().equals(String.valueOf(player))) {
			return true;
		}
		if(buttons[0][2].getText().equals(String.valueOf(player))&&
			buttons[1][1].getText().equals(String.valueOf(player))&&
			buttons[2][0].getText().equals(String.valueOf(player))) {
			return true;
		}
		return false;
	}
	
	private void resetBoard() {
		for(int i=0;i<3;i++) {
			for(int j=0;j<3;j++) {
				buttons[i][j].setText("");
			}
		}
		current_player=AI;
		makeAIMove();
	}
	
	private boolean isBoardFull() {
		for(int i=0;i<3;i++) {
			for(int j=0;j<3;j++) {
				if(buttons[i][j].getText().isEmpty())
					return false;
			}
		}
		return true;
	}
	
	public static  void main(String args[]) {
		SwingUtilities.invokeLater(()->{
			Tic_my game=new Tic_my();
			game.setVisible(true);
		});
	}
}
